local function map(mod, key, exec, opt)
  opt = opt or { noremap = true, silent = true }
  vim.api.nvim_set_keymap(mod, key, exec, opt)
end
map("n", "<leader>fk", "<cmd>lua require('telescope.builtin').keymaps()<CR>")
map("n", "<leader>fw", "<cmd>lua require('telescope.builtin').live_grep()<CR>")
map("n", "<leader>ff", "<cmd>lua require('telescope.builtin').find_files()<CR>")
map("n", "<leader>fr", "<cmd>lua require('telescope.builtin').registers()<CR>")
map("n", "<leader>fo", "<cmd>lua require('telescope.builtin').lsp_workspace_symbols()<CR>")
map("n", "<leader>fi", "<cmd>lua require('telescope.builtin').lsp_references()<CR>")
map("n", "<leader>fa", "<cmd>lua require('telescope.builtin').lsp_code_actions()<CR>")
map("n", "<leader>fb", "<cmd>lua require('telescope.builtin').buffers()<CR>")
map("n", "<leader>fs", "<cmd>lua require('telescope.builtin').git_status()<CR>")
map("n", "<leader>fc", "<cmd>lua require('telescope.builtin').git_commits()<CR>")
map("n", "<leader>fm", "<cmd>lua require('telescope.builtin').marks()<CR>")
map("n", "<leader>fd", "<cmd>lua require('telescope.builtin').lsp_document_symbols()<CR>")
map("n", "gd", "<cmd>lua require('telescope.builtin').lsp_definitions()<CR>")
map("n", "gi", "<cmd>lua require('telescope.builtin').lsp_implementations()<CR>")
map("n", "D", "<cmd>lua require('telescope.builtin').lsp_type_definitions()<CR>")
map("n", "<leader>gr", "<cmd>lua require('telescope.builtin').lsp_references()<CR>")
map("n", "<leader>la", "<cmd>lua require('lspsaga.codeaction').code_action()<CR>")
map("n", "<leader>lr", "<cmd>lua require('lspsaga.rename').rename()<CR>")
map("n", "<leader>ld", "<cmd>lua require'lspsaga.provider'.preview_definition()<CR>")
map("n", [[<leader>']], "<cmd>lua require('FTerm').toggle()<CR>")
map("n", "\\'", "<cmd>lua require('FTerm').toggle()<CR>")
map("n", [[<C-'>]], "<cmd>lua require('FTerm').toggle()<CR>")
map("n", "<leader>q", "<cmd>close<CR>")
map("n", "<leader>w", "<cmd>wa<CR>")
map("n", "<leader>Q", "<cmd>quitall<CR>")
map("n", "<leader>ps", "<cmd>lua require'core.pack'.status()<CR>")

map("n", "<leader>db", "<cmd>lua require'dap'.toggle_breakpoint()<CR>")
map("n", "<leader>dB", "<cmd>lua require'dap'.clear_breakpoint()<CR>")
map("n", "\\9", "<cmd>lua require'dap'.toggle_breakpoint()<CR>")
map("n", "<F9>", "<cmd>lua require'dap'.toggle_breakpoint()<CR>")
map("n", "<leader>dc", "<cmd>lua require'dap'.continue()<CR>")
map("n", "<leader>dC", "<cmd>lua require'dap'.close()<CR>")
map("n", "\\%", "<cmd>lua require'dap'.close()<CR>")
map("n", "<S-F5>", "<cmd>lua require'dap'.close()<CR>")
map("n", "<leader>do", "<cmd>lua require'dap'.step_over()<CR>")
map("n", "\\-", "<cmd>lua require'dap'.step_over()<CR>")
map("n", "<F11>", "<cmd>lua require'dap'.step_over()<CR>")
map("n", "<leader>di", "<cmd>lua require'dap'.step_into()<CR>")
map("n", "\\0", "<cmd>lua require'dap'.step_into()<CR>")
map("n", "<F10>", "<cmd>lua require'dap'.step_into()<CR>")
map("n", "<leader>dr", "<cmd>lua require'dap'.run()<CR>")
map("n", "\\5", "<cmd>lua require'dap'.run()<CR>")
map("n", "<F5>", "<cmd>lua require'dap'.run()<CR>")
map("n", "<leader>dR", "<cmd>lua require'dap'.repl.open()<CR>")
map("n", "<leader>duo", "<cmd>lua require'dapui'.open()<CR>")
map("n", "<leader>duc", "<cmd>lua require'dapui'.close()<CR>")

map("n", "<leader>gd", "<cmd>lua require'diffview'.open()<CR>")
map("n", "<leader>gD", "<cmd>lua require'diffview'.close()<CR>")

map("n", "<leader>hs", "<cmd>Gitsigns stage_hunk<CR>")
map("v", "<leader>hs", "<cmd>Gitsigns stage_hunk<CR>")
map("n", "<leader>hr", "<cmd>Gitsigns reset_hunk<CR>")
map("v", "<leader>hr", "<cmd>Gitsigns reset_hunk<CR>")
map("n", "<leader>hp", "<cmd>Gitsigns preview_hunk<CR>")
map("n", "<leader>hu", "<cmd>Gitsigns undo_stage_hunk<CR>")
map("n", "<leader>bs", "<cmd>Gitsigns stage_buffer<CR>")
map("n", "<leader>br", "<cmd>Gitsigns reset_buffer<CR>")
map("n", "<leader>hb", "<cmd>Gitsigns reset_buffer<CR>")
map("n", "<leader>tb", "<cmd>Gitsigns toggle_current_line_blame<CR>")
map("n", "<leader>hd", "<cmd>Gitsigns diffthis<CR>")
map("n", "<leader>hD", "<cmd>Gitsigns diffthis<CR>")
map("n", "<leader>td", "<cmd>Gitsigns toggle_deleted<CR>")
map("o", "ih", "<cmd><C-U>Gitsigns select_hunk<CR>")
map("x", "ih", "<cmd><C-U>Gitsigns select_hunk<CR>")

map("n", "<leader>e", "<cmd>lua require'nvim-tree'.toggle()<CR>")
map("n", "<leader>we", "<cmd>require'nvim-tree'.focus()<CR>")
map("n", "<leader>o", "<cmd>lua require'symbols-outline'.toggle_outline()<CR>")
map("n", "<leader>u", "<cmd>UndotreeToggle<CR>")
map("n", "<leader><Tab>", "<cmd>b#<CR>")

map("n", "<leader>ws", "<cmd>sp<CR>")
map("n", "<leader>wv", "<cmd>vs<CR>")

map("n", "[d", "<cmd>lua vim.diagnostic.goto_prev()<CR>")
map("n", "]d", "<cmd>lua vim.diagnostic.goto_next()<CR>")
map("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>")
map("n", "ge", "<cmd>lua vim.diagnostic.open_float()<CR>")

map("n", "\\q", "<cmd>close<CR>")
map("n", "\\y", '"+y')
map("n", "\\p", '"+p')
map("n", "\\P", '"+P')
map("v", "\\y", '"+y')
map("v", "\\p", '"+p')
map("v", "\\P", '"+P')

map("n", "<C-up>", "<cmd>res +1<CR>")
map("n", "<C-down>", "<cmd>res -1<CR>")
map("n", "<C-left>", "<cmd>vertical resize-1<CR>")
map("n", "<C-right>", "<cmd>vertical resize+1<CR>")

map("i", "<C-h>", "<Left>")
map("i", "<C-e>", "<End>")
map("i", "<C-l>", "<Right>")
map("i", "<C-k>", "<Up>")
map("i", "<C-j>", "<Down>")
map("i", "<C-a>", "<ESC>^i")

map("n", "<C-h>", "<C-w>h")
map("n", "<C-l>", "<C-w>l")
map("n", "<C-k>", "<C-w>k")
map("n", "<C-j>", "<C-w>j")

map("t", "<ESC>", "<C-\\><C-n>")
map("n", "Q", "<Nop>")

map("n", "<leader>by", "<cmd>%y+ <CR>") -- copy whole file content
map("n", "<C-t>", "<cmd>enew <CR>") -- new buffer

map("n", "<Tab>", "<cmd>lua require'bufferline'.cycle(1)<CR>")
map("n", "<S-Tab>", "<cmd>lua require'bufferline'.cycle(-1)<CR>")
