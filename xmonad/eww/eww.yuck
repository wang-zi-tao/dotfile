;;  **
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; ** 


    

        ;;  Profile vars 
        (defvar IMAGE "file:///home/wangzi/.config/eww/images/profile.jpg")
        (defvar NAME "wangzi")
		(defpoll UNAME :interval "5m"  "whoami")

        ;;  System vars 
		(defpoll HOST :interval "5s"  "hostname")
		(defpoll CPU_USAGE :interval "1s"  "~/.config/eww/scripts/sys_info --cpu")
		(defpoll MEM_USAGE :interval "1s"  "~/.config/eww/scripts/sys_info --mem")
		(defpoll BLIGHT :interval "1s"  "~/.config/eww/scripts/sys_info --blight")
		(defpoll BATTERY :interval "5s"  "~/.config/eww/scripts/sys_info --bat")

        ;;  Time vars 
		(defpoll HOUR :interval "5s"  "date +\"%I\"")
		(defpoll SEC :interval "1s"  "date +\"%S\"")
		(defpoll MIN :interval "5s"  "date +\"%M\"")
		(defpoll MER :interval "5s"  "date +\"%p\"")
		(defpoll DAY :interval "5s"  "date +\"%A\"")

        ;;  Uptime vars 
		(defpoll UPHOUR :interval "5s"  "cat /proc/uptime | awk -F. '{printf(\"%d hours\",($1/3600))}'")
		(defpoll UPMIN :interval "5s"  "cat /proc/uptime | awk -F. '{printf(\"%d minutes\",($1 % 3600)/60%60)}'")

        ;;  Music vars 
		(deflisten SONG :interval ""  "playerctl --follow metadata --format '{{ title }}'")
		(deflisten ARTIST :interval ""  "playerctl --follow metadata --format '{{ artist }}'")
		(defpoll STATUS :interval "1s"  "playerctl status || true")
		(defpoll CURRENT :interval "1s"  "playerctl position || true")
		(defpoll COVER :interval "1s"  "")
		(defpoll CTIME :interval "1s"  "~/.config/eww/scripts/music_info --ctime")
		(defpoll TTIME :interval "1s"  "")

		;; Weather vars
		(defpoll ICON :interval "15m"  "~/.config/eww/scripts/weather_info --icon")
		(defpoll STAT :interval "15m"  "~/.config/eww/scripts/weather_info --stat")
		(defpoll TEMP :interval "15m"  "~/.config/eww/scripts/weather_info --temp")
		(defpoll WEATHER :interval "15m"  "~/.config/eww/scripts/weather_info --getdata")
		(defpoll HEX :interval "15m"  "~/.config/eww/scripts/weather_info --hex")
		(defpoll QUOTE :interval "15m"  "~/.config/eww/scripts/weather_info --quote")
		(defpoll QUOTE2 :interval "15m"  "~/.config/eww/scripts/weather_info --quote2")

        ;;  Apps vars 
		(defpoll MAILS :interval "5m"  "echo 0")

        ;;  Files vars 
		(defpoll FREE :interval "5s"  "df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'")

    

;;  ******************************************************************************** 

    

        ;;  background 
		(defwidget bg [] 
			(box :class "bg"))

		;;  profile 
		(defwidget user [] 
			(box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(box :class "face" :halign "center")
				(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
    ))

		;;  system 
		(defwidget system [] 
			(box :class "genwin" :vexpand "false" :hexpand "false" 
				(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
					(box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
						(label :class "iconcpu" :text "")
						(scale :min 0 :max 100 :value {EWW_CPU["avg"]} :active "false"))
					(box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
						(label :class "iconmem" :text "ﲮ")
						(scale :min 0 :max {EWW_RAM.total_mem} :value {EWW_RAM.used_mem} :active "false"))
					(box :class "disk_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
						(label :class "icondisk" :text "")
						(scale :min 0 :max 100 :value {EWW_DISK["/"].used_perc} :active "false"))
					(box :class "bat_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
						(label :class "iconbat" :text "")
						(scale :min 0 :max 100 :value {EWW_BATTERY.total_avg} :active "false")))))

		;;  clock 
		(defwidget clock [] 
			(box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
				(label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN)
				(box :orientation "v" :spacing 25 :space-evenly "false" :vexpand "false" :hexpand "false" 
					(label :class "time_mer" :halign "end" :wrap "true" :limit-width 25 :text MER)
					(label :class "time_day" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

		;;  uptime 
		(defwidget uptime [] 
			(box :class "genwin" 
				(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
					(label :class "icontimer" :valign "center" :text "祥")
					(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
						(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
						(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

		;;  Music 
		(defwidget music [] 
			(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
				;;(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('{{COVER}}');")
				(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
					(label :halign "center" :class "song" :wrap "true" :limit-width 15 :text SONG)
					(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
					(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
						(button :class "btn_prev" :onclick "playerctl previous" "玲")
						(button :class "btn_play" :onclick "playerctl play-pause" {STATUS != "Playing" ? "" : "" })
						(button :class "btn_next" :onclick "playerctl next" "怜"))
					(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
						(scale :onscroll "playerctl position 1 +" :min 0 :active "true" :max 100 :value CURRENT)))))

		(defwidget web1 [] 
			(box :class "web1" :vexpand "false" :hexpand "false" 
				(button :class "iconweb" :onclick "~/.config/eww/scripts/trigger close;firefox --new-tab https://github.com" "")))

		(defwidget web2 [] 
			(box :class "web2" :vexpand "false" :hexpand "false" 
				(button :class "iconweb" :onclick "~/.config/eww/scripts/open_links --rd" "樓")))

		(defwidget web3 [] 
			(box :class "web3" :vexpand "false" :hexpand "false" 
				(button :class "iconweb" :onclick "~/.config/eww/scripts/trigger close;firefox --new-tab http://139.9.235.87:30003/zh-cn/" "ﲳ")))

		(defwidget web4 [] 
			(box :class "web4" :vexpand "false" :hexpand "false" 
				(button :class "iconweb" :onclick "~/.config/eww/scripts/trigger close;firefox --new-tab https://search.nixos.org/packages" "")))

		;;  mail 
		(defwidget mail [] 
			(box :class "mail" 
				(box :orientation "h" :halign "center" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
					(button :class "iconmail" :onclick "~/.config/eww/scripts/open_links --mail" "")
					(box :class "mailbox" :space-evenly "false" :vexpand "false" :hexpand "false" 
						(button :class "label_mails" :onclick "~/.config/eww/scripts/open_links --mail" MAILS)))))

		;;  weather 
		(defwidget weather [] 
			(box :class "genwin" 
				(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false" 
					(box :orientation "h" :vexpand "false" :hexpand "false" 
						(label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
						(label :class "label_temp" :halign "end" :text "${WEATHER != "" ? "" : "" }${TEMP - 273}°C" ))
					(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
						(label :class "label_stat" :text STAT)
						(label :class "label_quote" :text QUOTE)
						(label :class "label_quote" :text QUOTE2)))))

		;;  apps 
		(defwidget apps [] 
			(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
					(button :class "app_fox" :onclick "~/.config/eww/scripts/open_apps --ff/")
					(button :class "app_telegram" :onclick "~/.config/eww/scripts/open_apps --tg")
					(button :class "app_discord" :onclick "~/.config/eww/scripts/open_apps --dc"))
        (box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
					(button :class "app_terminal" :onclick "~/.config/eww/scripts/open_apps --tr")
					(button :class "app_files" :onclick "~/.config/eww/scripts/open_apps --fm")
					(button :class "app_geany" :onclick "~/.config/eww/scripts/open_apps --ge"))
        (box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
					(button :class "app_code" :onclick "~/.config/eww/scripts/open_apps --cd")
					(button :class "app_gimp" :onclick "~/.config/eww/scripts/open_apps --gp")
					(button :class "app_vbox" :onclick "~/.config/eww/scripts/open_apps --vb"))))

		;;  power buttons 
		(defwidget logout [] 
			(box :class "genwin" :vexpand "false" :hexpand "false" 
				(button :class "btn_logout" :onclick "openbox --exit" "﫼")))
		(defwidget sleep [] 
			(box :class "genwin" :vexpand "false" :hexpand "false" 
				(button :class "btn_sleep" :onclick "~/.config/eww/scripts/trigger close; i3lock -c '#000000' -u" "⏾")))
		(defwidget reboot [] 
			(box :class "genwin" :vexpand "false" :hexpand "false" 
				(button :class "btn_reboot" :onclick "systemctl reboot" "")))
		(defwidget poweroff [] 
			(box :class "genwin" :vexpand "false" :hexpand "false" 
				(button :class "btn_poweroff" :onclick "systemctl poweroff" "⏻")))

		(defwidget folder [ icon path index ] 
				(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
					(button :class "iconfolder${index}" :onclick "~/.config/eww/scripts/open_folders ${path}" icon)
					(button :class "label_folder${index}" :onclick "~/.config/eww/scripts/open_folders ${path}" path))
     )

		;;  folders 
		(defwidget folders [] 
			(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"			(box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
					(box :space-evenly "false" :vexpand "false" :hexpand "false"
						(button :class "hddicon" :onclick "~/.config/eww/scripts/open_apps --fm" ""))
					(label :class "fs_sep" :text "|")
					(box :space-evenly "false" :vexpand "false" :hexpand "false" 
						(label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE)))
        (folder :path "工作空间" :icon "" :index 1)
        (folder :path "文档" :icon "" :index 2)
        (folder :path "仓库" :icon "" :index 3)
        (folder :path "下载" :icon "" :index 4)
        (folder :path "图片" :icon "" :index 5)
        (folder :path "Home" :icon "" :index 6)
      ))

    

;;  ******************************************************************************** 

    

		;;  background 
		(defwindow background :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 0 :y 0 :width "1920px" :height "1080px")
			     				(bg))

		;;  profile 
		(defwindow profile :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 150 :y 150 :width 350 :height 440)
			     				(user))

		;;  system 
		(defwindow system :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 150 :y 605 :width 350 :height 325)
			     				(system))

		;;  clock 
		(defwindow clock :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 515 :y 150 :width 350 :height 155)
			     				(clock))

		;;  uptime 
		(defwindow uptime :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 515 :y 320 :width 350 :height 155)
			     				(uptime))

		;;  music 
		(defwindow music :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 515 :y 490 :width 350 :height 280)
			     				(music))

		;;  web1 
		(defwindow web1 :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 515 :y 785 :width 141 :height 145)
			     				(web1))

		;;  web2 
		(defwindow web2 :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 671 :y 785 :width 141 :height 145)
			     				(web2))

		;;  web3 
		(defwindow web3 :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 827 :y 785 :width 141 :height 145)
			     				(web3))

		;;  web4 
		(defwindow web4 :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 983 :y 785 :width 142 :height 145)
			     				(web4))

		;;  weather 
		(defwindow weather :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 880 :y 150 :width 550 :height 325)
			     				(weather))

		;;  apps 
		(defwindow apps :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 1140 :y 490 :width 290 :height 280)
			     				(apps))

		(defpoll TODO :interval "5s"  "todo --database ~/.todo --mono --use-format display=eww | tail -n 5")
		(defwidget todo [] 
			(box :class "genwin" :orientation "v" :space-evenly "false" :spacing 10 :vexpand "false" :hexpand "false" 
       (centerbox :class "todo" :orientation "v"
        (box :orientation "h" :class "todo_add_panel" :vexpand "false" :hexpand true :spacing 10 :space-evenly false
          (input :value "add todos" :onchange "echo" :hexpand true :class "todo_input" )
          ;;(combo-box-text :items ["veryhigh" "high" "medium" "default" "low" "verylow"])
          (button :onclick "echo" :class "todo_add" "" )
        )
        (box)
        (literal :content "(box :spacing 10 :halign \"start\" :orientation \"v\" ${TODO})")
       )
      )
    )
		(defwindow todo :stacking "fg" :focusable "true" :screen 1 
			    :geometry (geometry :x 880 :y 490 :width 550 :height 280)
                  (todo))
		;;  mail 
		(defwindow mail :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 1140 :y 785 :width 290 :height 145)
			     				(mail))

		;;  logout 
		(defwindow logout :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 1445 :y 150 :width 155 :height 155)
			     				(logout))

		;;  sleep 
		(defwindow sleep :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 1615 :y 150 :width 155 :height 155)
			     				(sleep))

		;;  reboot 
		(defwindow reboot :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 1445 :y 320 :width 155 :height 155)
			     				(reboot))

		;;  poweroff 
		(defwindow poweroff :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 1615 :y 320 :width 155 :height 155)
			     				(poweroff))

		;;  folders 
		(defwindow folders :stacking "fg" :focusable "false" :screen 1 
			    :geometry (geometry :x 1445 :y 490 :width 325 :height 440)
			     				(folders))
    
(defwidget bar []
  (centerbox :orientation "h"
    (box (workspaces))
    (box time)
    (box (sidestuff))
  )
)

(defwidget sidestuff []
  (box :halign "end" :space-evenly false :spacing 10
    (bar-music)
    (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
      (metric :label ""
              :value volume
              :onchange "amixer set Master {}%"))
    (box
 ;;     (label :text {"${EWW_NET.wlo1.NET_DOWN}K ${EWW_NET.wlo1.NET_UP}K"})
      (label :text {"${ EWW_NET.wlo1.NET_DOWN < 3000000 ? "${round(EWW_NET.wlo1.NET_DOWN/3000000,1)}M" : "${round(EWW_NET.wlo1.NET_DOWN/3000,1)}K"} ${ EWW_NET.wlo1.NET_UP < 1000000 ? "${round(EWW_NET.wlo1.NET_UP/1000000,1)}M" : "${round(EWW_NET.wlo1.NET_UP/1000,1)}K"}"})
    )
    (box :class "bar-system" 
         :orientation "v"
         :space-evenly true
        (box :class "color_red"
          (scale :min 0 :max 100 :value {EWW_CPU["avg"]} :active "false"))
        (box :class "color_yellow"
          (scale :min 0 :max {EWW_RAM.total_mem} :value {EWW_RAM.used_mem} :active "false"))
        (box :class "color_green"
          (scale :min 0 :max 100 :value {EWW_TEMPS.PACKAGE_ID_0} :active "false"))
        (box :class "color_sky" 
         (scale :min 0 :max 100 :value {EWW_BATTERY.total_avg} :active "false"))
    )
  )
)

(defwidget workspaces []
  (literal :content "(box :spacing 10 :class \"workspaces\" :space-evenly false ${workspaces})")
    
)

(defwidget bar-music []
  (box :class "bar-music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    music))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :wm-ignore true
  :stacking "bg"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "0px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "3%")
  (bar))

(defwindow animation :stacking "fg" :focusable "false" :screen 1 
      :geometry (geometry :x 515 :y 785 :width 141 :height 145)
              (animation))
(defwidget animation [] 
   (revealer :transition "crossfade" :duration 0.1 :style "background=#fff;" :reveal true
    (box :class "web1" :vexpand "false" :hexpand "false" 
      (button :class "iconweb" :onclick "~/.config/eww/scripts/trigger close;firefox --new-tab https://github.com" "${SEC}")))
)
